/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Identify, IdentifyInterface } from "../../Identify.sol/Identify";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "_passwordHash",
        type: "string",
      },
    ],
    name: "addPerson",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "pubSignals",
        type: "uint256[]",
      },
    ],
    name: "authenticate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "active",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "passwordHash",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610f86380380610f86833981810160405281019061003291906100c4565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610148565b6000815190506100be81610131565b92915050565b6000602082840312156100d657600080fd5b60006100e4848285016100af565b91505092915050565b60006100f882610111565b9050919050565b600061010a826100ed565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61013a816100ff565b811461014557600080fd5b50565b60805160601c610e1961016d6000396000818161010801526101fe0152610e196000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806312de590b1461005c5780632b7ac3f314610078578063a87430ba14610096578063cf5e49eb146100c8578063f851a440146100e4575b600080fd5b610076600480360381019061007191906107bd565b610102565b005b6100806101fc565b60405161008d9190610a02565b60405180910390f35b6100b060048036038101906100ab9190610717565b610220565b6040516100bf93929190610a7d565b60405180910390f35b6100e260048036038101906100dd9190610740565b6102d2565b005b6100ec6104c9565b6040516100f991906109ae565b60405180910390f35b600115157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631e8e1e138585856040518463ffffffff1660e01b8152600401610163939291906109c9565b602060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b59190610794565b1515146101f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ee90610a5d565b60405180910390fd5b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160205280600052604060002060009150905080600001549080600101549080600201805461024f90610c51565b80601f016020809104026020016040519081016040528092919081815260200182805461027b90610c51565b80156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b5050505050905083565b816002600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154148061036657506003600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154145b156103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d90610a3d565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b90610a1d565b60405180910390fd5b6040518060600160405280600081526020016002815260200183815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906104c09291906104ed565b50905050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8280546104f990610c51565b90600052602060002090601f01602090048101928261051b5760008555610562565b82601f1061053457805160ff1916838001178555610562565b82800160010185558215610562579182015b82811115610561578251825591602001919060010190610546565b5b50905061056f9190610573565b5090565b5b8082111561058c576000816000905550600101610574565b5090565b60006105a361059e84610ae0565b610abb565b905080838252602082019050828560208602820111156105c257600080fd5b60005b858110156105f257816105d88882610702565b8452602084019350602083019250506001810190506105c5565b5050509392505050565b600061060f61060a84610b0c565b610abb565b90508281526020810184848401111561062757600080fd5b610632848285610c0f565b509392505050565b60008135905061064981610d9e565b92915050565b600082601f83011261066057600080fd5b8135610670848260208601610590565b91505092915050565b60008151905061068881610db5565b92915050565b60008083601f8401126106a057600080fd5b8235905067ffffffffffffffff8111156106b957600080fd5b6020830191508360018202830111156106d157600080fd5b9250929050565b600082601f8301126106e957600080fd5b81356106f98482602086016105fc565b91505092915050565b60008135905061071181610dcc565b92915050565b60006020828403121561072957600080fd5b60006107378482850161063a565b91505092915050565b6000806040838503121561075357600080fd5b60006107618582860161063a565b925050602083013567ffffffffffffffff81111561077e57600080fd5b61078a858286016106d8565b9150509250929050565b6000602082840312156107a657600080fd5b60006107b484828501610679565b91505092915050565b6000806000604084860312156107d257600080fd5b600084013567ffffffffffffffff8111156107ec57600080fd5b6107f88682870161068e565b9350935050602084013567ffffffffffffffff81111561081757600080fd5b6108238682870161064f565b9150509250925092565b60006108398383610990565b60208301905092915050565b61084e81610ba3565b82525050565b600061085f82610b4d565b6108698185610b70565b935061087483610b3d565b8060005b838110156108a557815161088c888261082d565b975061089783610b63565b925050600181019050610878565b5085935050505092915050565b60006108be8385610b81565b93506108cb838584610c0f565b6108d483610d12565b840190509392505050565b6108e881610beb565b82525050565b60006108f982610b58565b6109038185610b92565b9350610913818560208601610c1e565b61091c81610d12565b840191505092915050565b6000610934600b83610b92565b915061093f82610d23565b602082019050919050565b6000610957601383610b92565b915061096282610d4c565b602082019050919050565b600061097a600d83610b92565b915061098582610d75565b602082019050919050565b61099981610be1565b82525050565b6109a881610be1565b82525050565b60006020820190506109c36000830184610845565b92915050565b600060408201905081810360008301526109e48185876108b2565b905081810360208301526109f88184610854565b9050949350505050565b6000602082019050610a1760008301846108df565b92915050565b60006020820190508181036000830152610a3681610927565b9050919050565b60006020820190508181036000830152610a568161094a565b9050919050565b60006020820190508181036000830152610a768161096d565b9050919050565b6000606082019050610a92600083018661099f565b610a9f602083018561099f565b8181036040830152610ab181846108ee565b9050949350505050565b6000610ac5610ad6565b9050610ad18282610c83565b919050565b6000604051905090565b600067ffffffffffffffff821115610afb57610afa610ce3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610b2757610b26610ce3565b5b610b3082610d12565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610bae82610bc1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bf682610bfd565b9050919050565b6000610c0882610bc1565b9050919050565b82818337600083830152505050565b60005b83811015610c3c578082015181840152602081019050610c21565b83811115610c4b576000848401525b50505050565b60006002820490506001821680610c6957607f821691505b60208210811415610c7d57610c7c610cb4565b5b50919050565b610c8c82610d12565b810181811067ffffffffffffffff82111715610cab57610caa610ce3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6f6e6c792061646d696e73000000000000000000000000000000000000000000600082015250565b7f7573657220616c72656164792065786973747300000000000000000000000000600082015250565b7f496e76616c69642050726f6f6600000000000000000000000000000000000000600082015250565b610da781610ba3565b8114610db257600080fd5b50565b610dbe81610bb5565b8114610dc957600080fd5b50565b610dd581610be1565b8114610de057600080fd5b5056fea26469706673582212208adda5a1257ef09c778691021973cbab83fd2c6139e2201292391c9f7cdbbd5264736f6c63430008040033";

type IdentifyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IdentifyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Identify__factory extends ContractFactory {
  constructor(...args: IdentifyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Identify> {
    return super.deploy(_verifier, overrides || {}) as Promise<Identify>;
  }
  override getDeployTransaction(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override attach(address: string): Identify {
    return super.attach(address) as Identify;
  }
  override connect(signer: Signer): Identify__factory {
    return super.connect(signer) as Identify__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IdentifyInterface {
    return new utils.Interface(_abi) as IdentifyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Identify {
    return new Contract(address, _abi, signerOrProvider) as Identify;
  }
}
